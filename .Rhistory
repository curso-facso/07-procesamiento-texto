funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
library(udpipe)
udpipe::udpipe_download_model("spanish")
model <- udpipe::udpipe_load_model(file = "spanish-gsd-ud-2.5-191206.udpipe")
pos <- udpipe::udpipe_annotate(model, funes)
pos
library(tidyverse)
funes2 <- funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
print(funes2)
pos <- udpipe::udpipe_annotate(model, funes2)
pos
pos <- udpipe::udpipe_annotate(model, funes2)
pos
pos_df <- as.data.frame(pos)
View(pos_df)
pos_df %>%
filter(xpos == "ADJ")
pos_df %>%
filter(upos == "ADJ")
pos_df %>%
filter(upos == "ADJ") %>%
pull(token)
pos_df %>%
filter(upos == "ADJ") %>%
pull(token) %>%
unique()
str_length("dsfd")
bandas <-  c("rush", "dream theater")
str_split(bandas)
str_split(bandas, pattern = " ")
bandas <-  c("rush", "dream theater", "tool", "rage against the machine")
str_split(bandas, pattern = " ")
bandas <-  c("Rush", "Dream Theater", "Tool", "Rage Against the Machine")
str_to_lower(bandas)
str_sub(bandas, 1, 2)
str_replace(bandas, pattern = "a", replacement = "x")
str_replace_all(bandas, pattern = "a", replacement = "x")
str_extract(bandas, pattern = "a")
bandas
str_extract(bandas, pattern = "a")
str_split(bandas, pattern = " ")
str_length(bandas)
library(tidyverse)
funes2 <- funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
write_csv(funes2, file = "data/funes_editado.csv")
funes2 <- funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
write_csv(funes2, file = "data/funes_editado.csv")
funes2
print(funes2)
funes2
write_csv(text = funes2, file = "data/funes_editado.csv")
unlist(funes2)
write_csv(text = unlist(funes2), file = "data/funes_editado.csv")
write_csv(data.frame(text = unlist(funes2)) , file = "data/funes_editado.csv")
library(tidyverse)
funes2 <- funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
write_csv(data.frame(text = unlist(funes2)) , file = "data/funes_editado.csv")
print(funes2)
funes <-  read_csv("data/funes_editado.pdf")
funes <-  read_csv("data/funes_editado.csv")
View(funes)
funes %>%
str_split(pattern = " ")
funes %>%
str_split(pattern = " ") %>%
str_remove_all(pattern = "(") %>%
str_remove_all(pattern = ")")
funes %>%
str_split(pattern = " ") %>%
str_remove_all(pattern = "\(") %>%
funes %>%
str_split(pattern = " ") %>%
str_remove_all(pattern = "\\(") %>%
str_remove_all(pattern = "\\)")
funes %>%
str_split(pattern = " ")
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\\(")
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\(")
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\\\(")
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\\\\(")
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "(" )
funes %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\\(" )
funes
funes$text[1]
funes$text[1] %>%
str_remove(pattern = "\\(" )
funes$text[1] %>%
str_split(pattern = " ")
funes$text[1] %>%
str_split(pattern = " ") %>%
str_remove(pattern = "\\(" )
funes$text[1] %>%
str_split(pattern = " ")
funes %>%
str_split(pattern = " ")
funes %>%
str_split(pattern = " ") %>%
str_length()
funes %>%
str_split(pattern = " ")
funes %>%
str_split(pattern = " ") %>%
str_length()
x <- funes %>%
str_split(pattern = " ")
x
x %>% length()
length(funes)
x <- funes$text %>%
str_split(pattern = " ")
x
x %>% length()
x
x <- funes$text %>%
str_split(pattern = " ") %>%
str_length()
x
x <- funes$text %>%
str_split(pattern = " ")
x <- funes$text %>%
str_split(pattern = " ") %>%
str_length()
x <- funes$text %>%
str_split(pattern = " ")
x
x <- funes$text %>%
str_split(pattern = " ", simplify = T)
x
length(x)
x <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_length()
x
x <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_length()
largo_palabras <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_length()
summary(largo_palabras)
largo_palabras
largo_palabras <- funes$text %>%
str_split(pattern = " ", simplify = T)
largo_palabras
words <- funes$text %>%
str_split(pattern = " ", simplify = T)
lenght_words <- words %>%
str_length()
lenght_words
knitr::opts_chunk$set(echo = TRUE)
words
words <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_remove(pattern = "(")
words <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_remove(pattern = "\(")
words <- funes$text %>%
str_split(pattern = " ", simplify = T) %>%
str_remove(pattern = "\\(")
words
words %>%
str_sub(start = 1)
words %>%
str_sub(start = 1, end = 1)
words %>%
str_replace_all(str_sub(start = 1, end = 1), replacement = "X")
words %>%
str_replace_all(str_sub(words, start = 1, end = 1), replacement = "X")
words %>%
str_sub(words, start = 1, end = 1)
words %>%
str_sub(start = 1, end = 1)
last_2 <- words %>%
str_sub(start = -1, end = 2)
last_2
last_2 <- words %>%
str_sub(start = -1, end = -2)
last_2
last_2 <- words %>%
str_sub(start = -2, end = -1)
last_2
words
last_2
words
last_2
funes2
funes2 %>%
str_extract("a|e|i|o|u")
funes2 %>%
str_extract_all("a|e|i|o|u")
ejemplo <- c("amigo", "amiga")
str_detect(ejemplo, "amig(o|a)")
ejemplo <- c("amigo", "amigg")
str_detect(ejemplo, "amig(o|a)")
ejemplo <- c("amigo", "amiga", "Amiga")
str_detect(ejemplo, "amig(o|a)")
ejemplo <- c("amigo", "amiga", "Amiga")
str_detect(ejemplo, "(A|a)mig(o|a)")
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}",
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El carácter que le precede debe aparecer al menos una vez.",
"El carácter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces."
)))
regex
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El carácter que le precede debe aparecer al menos una vez.",
"El carácter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces."
))
regex
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El carácter que le precede debe aparecer al menos una vez.",
"El carácter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces."
))
regex
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El caracter que le precede debe aparecer al menos una vez.",
"El caracter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces."
))
regex
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}", "\d", "[a-z]", "\w"),
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}", "d", "[a-z]", "w"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El caracter que le precede debe aparecer al menos una vez.",
"El caracter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces.",
"Dígito del 1 al 9",
"rango de valores",
"caracteres alfanuméricos"
))
regex
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}", "d", "[a-z]", "w", "[:punct:]"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El caracter que le precede debe aparecer al menos una vez.",
"El caracter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces.",
"Dígito del 1 al 9",
"Rango de valores",
"Caracteres alfanuméricos",
"Signos de puntuación"
))
regex
funes2 %>%
str_extract("[:digit:]")
funes2
funes2 %>%
str_extract("[:digit:]")
funes2 %>%
str_extract_all("[:digit:]")
funes2 %>%
str_extract_all("[[:digit:]]")
funes2 %>%
str_extract_all("[a-z]")
funes2 %>%
str_extract("[a-z]")
funes2[[1]] %>%
str_extract("[a-z]")
funes2[[1]] %>%
str_extract_all("[a-z]")
funes2[[1]] %>%
str_extract_all("[:punct:]")
funes2[[1]] %>%
str_extract_all("[:digit:]")
funes2[[1]] %>%
str_extract_all("[:punct:]")
funes2[[1]] %>%
str_extract_all("\d")
funes2[[1]] %>%
str_extract_all("/d")
funes2[[1]] %>%
str_extract_all("/d")
funes2[[1]] %>%
str_extract_all("\d")
funes2[[1]] %>%
str_extract_all("\\d")
funes2[[1]] %>%
str_extract_all("[:digit:]")
funes2[[1]] %>%
str_extract_all("[:alpha:]")
funes2[[1]] %>%
str_extract_all("[a-z]")
funes2[[1]] %>%
str_extract_all("[:punct:]")
funes2[[1]] %>%
str_extract_all("[:digit:]")
funes2[[1]] %>%
str_extract_all("[:punct:]")
funes2[[1]]
funes[[1]] %>%
str_extract("año [:digit:]{1,4}")
funes[[1]] %>%
str_extract("año [:digit:]+")
funes[[1]]
funes[[1]] %>%
str_extract("año [:digit:]+")
funes[[1]]
funes[[1]] %>%
str_extract("año.[:digit:]+")
funes[[1]]
funes[[1]] %>%
str_extract_all("año.[:digit:]+")
funes %>%
str_extract("año.[:digit:]+")
funes2 %>%
str_extract("año.[:digit:]+")
funes2 %>%
str_extract("(año|en).[:digit:]+")
funes2 %>%
str_extract("(año).[:digit:]+")
funes2 %>%
str_extract_all("(año|en).[:digit:]+")
funes2[[1]] %>%
str_extract_all("(año|en).[:digit:]+")
funes2[[1]] %>%
str_extract_all("(año).[:digit:]+")
funes2[[1]] %>%
str_extract("(año).[:digit:]+")
funes2[[1]] %>%
str_extract_all("(año).[:digit:]+")
funes2[[1]] %>%
str_extract_all("año.[:digit:]+")
funes2[[1]]
funes2
funes2[[1]] %>%
str_extract_all("(año|en).[:digit:]+")
funes2[[2]] %>%
str_extract_all("(año|en).[:digit:]+")
funes2[[1]] %>%
str_extract_all("(año|en).([:digit:])+")
funes2 %>%
str_extract_all("(año|en).([:digit:])+")
library(stringdist)
install.packages("stringdist")
library(stringdist)
stringdist("hola", method = "cosine")
stringdist("hola", "laoh", method = "cosine")
stringdist("hola", "hola", method = "cosine")
stringdist("hola", "hlov", method = "cosine")
stringdist("hola", "laoh", method = "cosine")
stringdist("hola", "holas", method = "cosine")
stringdist("hola", "", method = "cosine")
library(pdftools)
funes <-  pdf_text("data/funes.pdf")
funes
library(tidyverse)
funes2 <- funes %>%
str_remove(pattern = "Jorge Luis Borges\n\n\n") %>%
str_replace_all(pattern = "\n", " ") %>%
str_remove(pattern = "Funes, el memorioso" ) %>%
str_remove_all(pattern = "  ") %>%
str_remove_all("\\\\")
write_csv(data.frame(text = unlist(funes2)) , file = "data/funes_editado.csv")
print(funes2)
library(udpipe)
model <- udpipe::udpipe_load_model(file = "spanish-gsd-ud-2.5-191206.udpipe")
pos <- udpipe::udpipe_annotate(model, funes2)
pos_df <- as.data.frame(pos)
pos_df %>%
filter(upos == "NOUN") %>%
pull(token) %>%
unique()
bandas <-  c("Rush", "Dream Theater", "Tool", "Rage Against the Machine")
str_to_lower(bandas)
# Extrar desde la primera posición hasta la segunda posición
# IMPORTANTE: también puedes usar índices negativos
str_sub(bandas, start = 1, end =  2)
str_replace(bandas, pattern = "a", replacement = "x")
str_length(bandas)
str_replace_all(bandas, pattern = "a", replacement = "x")
str_extract(bandas, pattern = "a")
# IMPORTANTE: Genera una lista, cuyos elementos son vectores
str_split(bandas, pattern = " ")
library(readr)
funes <-  read_csv("data/funes_editado.csv")
funes2 %>%
str_extract_all("a|e|i|o|u")
ejemplo <- c("amigo", "amiga", "Amiga")
str_detect(ejemplo, "(A|a)mig(o|a)")
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}", "[:digit:]", "[a-z]", "[:alnum:]", "[:punct:]"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El caracter que le precede debe aparecer al menos una vez.",
"El caracter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces.",
"Dígito del 1 al 9",
"Rango de valores",
"Caracteres alfanuméricos",
"Signos de puntuación"
))
funes2[[1]] %>%
str_extract_all("[:digit:]")
funes2[[1]] %>%
str_extract_all("[:punct:]")
# Encontrar un string más complejo
funes2 %>%
str_extract_all("(año|en).([:digit:])+")
funes
funes2
funes2 %>%
str_count("(")
regex <- data.frame(expresion = c("?", "+", "*", "{n}", "{n,m}", "[:digit:]", "[a-z]", "[:alnum:]", "[:punct:]"),
descripción = c("El caracter que precede puede aparecer como mucho una vez.",
"El caracter que le precede debe aparecer al menos una vez.",
"El caracter que le precede puede aparecer cero, una, o más veces.",
"Indica que coincide n veces.",
"Indica que coincide mas n veces y menos de m veces.",
"Dígito del 1 al 9",
"Rango de valores",
"Caracteres alfanuméricos",
"Signos de puntuación"
))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
funes <-  read_csv("data/funes_editado.csv")
words <- funes$text %>%
str_split(pattern = " ", simplify = T)
lenght_words <- words %>%
str_length()
summary(lenght_words)
words
words <- funes$text %>%
str_split(pattern = " ", simplify = T)
words
words <- funes$text %>%
str_split(pattern = " ", simplify = T)
words[1:50]
words %>% str_detect("\.|\(")
words
words[[3]]
words[[3]] %>% str_detect("\.|\(")
words[[3]] %>% str_detect("/.|/(")
words[[3]] %>% str_detect(".|(")
words[[3]] %>% str_detect("(")
words[[3]] %>% str_detect("\\(")
words[[3]] %>% str_detect("\\(|\\.")
words %>% str_detect("\\(|\\.")
filtro <- words %>% str_detect("\\(|\\.")
words[filtro]
words[filtro][1:10]
words <- funes$text %>%
str_split(pattern = " ", simplify = T)
filtro <- words %>% str_detect("\\(|\\.")
words[filtro][1:10]
string <- "no se quién soy ¿Cuál es mi especie?"
print(paste("eres un", class(string)))
string <- "siento angustia. No sé quién soy ¿Cuál es mi especie?"
print(paste("Take it easy. Eres un", class(string)))
string <- "siento angustia. No sé quién soy"
print(paste("Take it easy. Eres un", class(string)))
print("Gracias por aliviar mi angustia existencial")
print("String: Gracias por aliviar mi angustia existencial")
string <- "siento angustia. No sé quién soy"
print(paste("Computador:", "Take it easy. Eres un", class(string)))
string <- "siento angustia. No sé quién soy"
print(paste("Programador:", "Take it easy. Eres un", class(string)))
print("hola '")
print("hola "fdsfd" ")
print('Vito Corleone lo reprendió, "Nunca digas lo que piensas frente a extraños" ')
writeLines('Vito Corleone lo reprendió, "Nunca digas lo que piensas frente a extraños" ')
print('Vito Corleone lo reprendió: "Nunca digas lo que piensas frente a extraños" ')
writeLines('Vito Corleone lo reprendió: "Nunca digas lo que piensas frente a extraños" ')
install.packages("calidad")
